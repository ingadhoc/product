-
  Test the following with user admin
-
  !context
    uid: 'base.user_root'
-
  Create a wine A product
-
  !record {model: product.product, id: product_product_a}:
    categ_id: product.product_category_1
    name: Wine A01
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    company_id: 0
    standard_price: 50.0
    list_price: 75.0
-
  Test the prices are updated correctly
-
  !python {model: product.product}: |
    product = self.browse(ref('product_product_a'))
    assert product.standard_price == 50.0, "01 The standard_price has not been recorded correctly"
    assert product.replenishment_cost == 0.0, "01 The replenishment_cost has not been recorded correctly"
-
  Modify product A set new prices
-
  !python {model: product.product}: |
    product = self.browse(ref('product_product_a'))
    product.write({'standard_price':70})
    assert product.standard_price == 70.0, "02 The standard_price has not been recorded correctly"
-
  Set replenishment cost
-
  !python {model: product.product}: |
    product_tmpl = self.browse(ref('product_product_a')).product_tmpl_id
    product_tmpl.write({'replenishment_base_cost':100.0})
    assert product_tmpl.replenishment_base_cost == 100.0, "03 The replenishment_base_cost has not been recorded correctly"
    assert product_tmpl.replenishment_cost == 100.0, "04 The replenishment_cost has not been recorded correctly"
-
  Run wizard named 'Update Accounting Cost from Replenishment Cost'
-
  !python {model: product.product}: |
    product_template = self.browse(ref('product_product_a')).product_tmpl_id
    wizard = self.env['product.update_from_replenishment_cost.wizard'].with_context({
      'active_model': 'product.template', 
      'active_id': product_template.id, 
      'active_ids': [product_template.id]}
      ).create({})
    wizard.confirm()
    assert product_template.standard_price == 100.0, "05 The standard_price has not been updated correctly"

